.game {
    display: flex;
    flex-direction: column;
}

:root {
    --square-size: calc(10vh);
}

.grid-container {
    display: grid;
    grid-template-columns: repeat(7, 1fr); /* 7 columns */
    grid-template-rows: repeat(6, 1fr); /* 6 rows */
    gap: calc(var(--square-size) / 10); /* Adjust the gap between squares as needed */
    background-color: rgb(39, 40, 42);
    border-radius: 50px rgb(39, 40, 42);
    padding: calc(var(--square-size) / 10);
}

.square {
    width: var(--square-size); /* Use the variable */
    height: var(--square-size); /* Use the variable */
    background-color: grey;
    border: calc(var(--square-size) / 10) solid rgb(36, 53, 0);
}

.square-red {
    width: 50px;
    height: 50px;
    background-color: red;
    border: 3px solid rgb(37, 54, 0);
}

.square-blue {
    width: 50px;
    height: 50px;
    background-color: blue;
    border: 3px solid rgb(36, 53, 0);
}

.button-container {
    display: grid;
    grid-template-columns: repeat(7, 1fr); /* 7 columns */
    gap: calc(var(--square-size) / 10); /* Adjust the gap between squares as needed */
    background-color: rgb(39, 40, 42);
    border-radius: 50px rgb(39, 40, 42);
    padding: calc(var(--square-size) / 10);
}

.button {
    width: var(--square-size);
    height: var(--square-size);
    border: calc(var(--square-size) / 23) solid rgba(22, 89, 161, 0.601)
}

@media (orientation: portrait) {
    :root {
        --square-size: 10vw; /* Change size based on viewport width */
    }
}
